# Generated by Django 5.0.3 on 2025-07-24 12:32

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ModelConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Configuration name (e.g., 'gemma_primary')", max_length=100, unique=True)),
                ('model_name', models.CharField(help_text="Full model identifier (e.g., 'gemini/gemma-7b')", max_length=200)),
                ('temperature', models.FloatField(default=0.3, help_text='Temperature for response randomness (0.0-2.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.IntegerField(default=2048, help_text='Maximum tokens for model response', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8192)])),
                ('top_p', models.FloatField(default=0.9, help_text='Top-p sampling parameter (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('timeout', models.IntegerField(default=180, help_text='Timeout in seconds', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(600)])),
                ('priority', models.IntegerField(default=1, help_text='Priority for fallback selection (higher = try first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('is_fallback', models.BooleanField(default=False, help_text='Whether this is a fallback configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PromptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=200, unique=True)),
                ('template_type', models.CharField(choices=[('instruction', 'Task Instruction'), ('analysis', 'Analysis Prompt'), ('decision', 'Decision Making'), ('review', 'Review Process'), ('system', 'System Message')], max_length=50)),
                ('content', models.TextField(help_text='Prompt template content')),
                ('variables', models.JSONField(default=list, help_text='List of variable names that can be substituted in this template')),
                ('description', models.TextField(blank=True, help_text='Description of when to use this template')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Configuration key', max_length=100, unique=True)),
                ('value', models.TextField(help_text='Configuration value')),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON')], default='string', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of this configuration setting')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HiringSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('candidate_name', models.CharField(blank=True, max_length=200)),
                ('job_title', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('input_data', models.JSONField(default=dict, help_text='Input data for the hiring evaluation')),
                ('results', models.JSONField(default=dict, help_text='Results from the hiring evaluation')),
                ('execution_time', models.FloatField(blank=True, help_text='Total execution time in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_config_used', models.ForeignKey(blank=True, help_text='Model configuration used for this session', null=True, on_delete=django.db.models.deletion.SET_NULL, to='agent.modelconfiguration')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('model_error', 'Model Error'), ('api_error', 'API Error'), ('configuration_error', 'Configuration Error'), ('task_error', 'Task Execution Error'), ('validation_error', 'Validation Error')], max_length=50)),
                ('message', models.TextField(help_text='Error message')),
                ('details', models.JSONField(default=dict, help_text='Additional error details and context')),
                ('resolved', models.BooleanField(default=False, help_text='Whether this error has been resolved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(blank=True, help_text='Related hiring session if applicable', null=True, on_delete=django.db.models.deletion.CASCADE, to='agent.hiringsession')),
                ('model_config', models.ForeignKey(blank=True, help_text='Model configuration when error occurred', null=True, on_delete=django.db.models.deletion.SET_NULL, to='agent.modelconfiguration')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent_type', models.CharField(choices=[('job_matcher', 'Job Matching Agent'), ('bias_auditor', 'Bias Auditing Agent'), ('custom', 'Custom Agent')], max_length=50, unique=True)),
                ('role', models.CharField(help_text='Agent role/title', max_length=200)),
                ('goal', models.TextField(help_text="Agent's primary goal")),
                ('backstory', models.TextField(help_text="Agent's background and expertise")),
                ('max_execution_time', models.IntegerField(default=300, help_text='Maximum execution time in seconds', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(600)])),
                ('allow_delegation', models.BooleanField(default=False, help_text='Whether agent can delegate tasks')),
                ('verbose', models.BooleanField(default=True, help_text='Whether to enable verbose logging')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this agent configuration is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_config', models.ForeignKey(help_text='Model configuration to use for this agent', on_delete=django.db.models.deletion.CASCADE, to='agent.modelconfiguration')),
            ],
        ),
        migrations.CreateModel(
            name='TaskConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('job_matching', 'Job Matching Task'), ('bias_audit', 'Bias Audit Task'), ('custom', 'Custom Task')], max_length=50, unique=True)),
                ('name', models.CharField(help_text='Task name', max_length=200)),
                ('description', models.TextField(help_text='Task description/instructions')),
                ('expected_output', models.TextField(help_text='Expected output format')),
                ('token_limit', models.IntegerField(default=1500, help_text='Recommended token limit for this task', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(4000)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this task configuration is active')),
                ('execution_order', models.IntegerField(default=1, help_text='Order of task execution (lower numbers execute first)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent_config', models.ForeignKey(help_text='Agent configuration to assign this task to', on_delete=django.db.models.deletion.CASCADE, to='agent.agentconfiguration')),
            ],
            options={
                'ordering': ['execution_order', 'name'],
            },
        ),
    ]
